Time complexity of Relaxed partial order
Two main components: the sorting process and the comparison function.
1. Sorting Algorithm:
Using Collections.sort() in Java, which internally uses Timesort. The time complexity of Timesort in the best, average, and worst cases is:
•	Best case: O(n)
•	Average case: O(n log n)
•	Worst case: O(n log n)
Where n is the number of elements in the list. For this case, we are sorting 100 elements, so the sorting itself will have a time complexity of O(n log n) on average.
2. Comparison Function:
In each comparison:
•	Truncating the decimal part of the two numbers using (int) Math.floor(num).
•	Comparing the integer parts of the two numbers.
•	Comparing the original double values if the integer parts are equal.
Each comparison operation between two numbers involves constant-time operations:
•	Truncating a double to an int takes O(1) time.
•	Comparing two integers takes O(1) time.
•	Comparing two double values also takes O(1) time.
So, each individual comparison has a time complexity of O(1).
Overall Time Complexity:
Since the sort() function performs O(n log n) comparisons, and each comparison takes O(1) time, the overall time complexity is:
O(n log n)
For our case, with n = 100, the time complexity will still be O(n log n), which works out to around O(100 log 100).
Conclusion:
•	Time complexity of the algorithm: O(n log n)
References: 
"Partial ordering" and happens-before relation Java. (n.d.). Stack Overflow. https://stackoverflow.com/questions/19120979/partial-ordering-and-happens-before-relation-java?newreg=00105419a0c1436ea8f6038ffb8d63d9 
Sorting algorithms. (2017, June 6). GeeksforGeeks. https://www.geeksforgeeks.org/sorting-algorithms/ 
Time complexities of all sorting algorithms. (2024, February 22). GeeksforGeeks. https://www.geeksforgeeks.org/time-complexities-of-all-sorting-algorithms/ 
Time complexity for a sorting algorithm. (n.d.). Stack Overflow. https://stackoverflow.com/questions/26816687/time-complexity-for-a-sorting-algorithm 

